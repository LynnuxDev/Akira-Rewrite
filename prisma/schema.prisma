generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE")
}

/**
 * Enums
 */

enum CommandType {
  MESSAGE
  SLASH
  BUTTON
}

enum PremiumTier {
  BASIC
  GOLD
  PLATINUM
}

/**
 * Main Base
 */

model User {
  uuid         String               @unique @default(uuid())
  user_id      String               @id
  createdAt    DateTime             @default(now())
  // Relation
  banned       UserBan?
  CommandUsage CommandUsage[]
  Cooldown     Cooldown[]
  localization UserLocalization?
  premium      PremiumSubscription?
  profile      UserProfile?
  settings     UserSettings?
}

/**
 * Command Usage
 */

model CommandUsage {
  cuid       String                 @id @default(cuid())
  isGlobal   Boolean                @default(false)
  // Relation
  daily      DailyCommandUsage?
  weekly     WeeklyCommandUsage?
  monthly    MonthlyCommandUsage?
  global     AllTimeCommandUsage?
  Individual IndividualCommandStat?
  user       User                   @relation(fields: [userId], references: [user_id])
  userId     String
}

model DailyCommandUsage {
  cuid           String       @id @default(cuid())
  message        Int          @default(0)
  slash          Int          @default(0)
  button         Int          @default(0)
  errors         Int          @default(0)
  date           DateTime     @default(now())
  // Relation
  commandUsage   CommandUsage @relation(fields: [commandUsageId], references: [cuid])
  commandUsageId String       @unique
}

model WeeklyCommandUsage {
  cuid           String       @id @unique @default(cuid())
  message        Int          @default(0)
  slash          Int          @default(0)
  button         Int          @default(0)
  errors         Int          @default(0)
  date           DateTime     @default(now())
  // Relation
  commandUsage   CommandUsage @relation(fields: [commandUsageId], references: [cuid])
  commandUsageId String       @unique
}

model MonthlyCommandUsage {
  cuid           String       @id @unique @default(cuid())
  message        Int          @default(0)
  slash          Int          @default(0)
  button         Int          @default(0)
  errors         Int          @default(0)
  date           DateTime     @default(now())
  // Relation
  commandUsage   CommandUsage @relation(fields: [commandUsageId], references: [cuid])
  commandUsageId String       @unique
}

model AllTimeCommandUsage {
  cuid           String       @id @unique @default(cuid())
  message        Int          @default(0)
  slash          Int          @default(0)
  button         Int          @default(0)
  errors         Int          @default(0)
  date           DateTime     @default(now())
  // Relation
  commandUsage   CommandUsage @relation(fields: [commandUsageId], references: [cuid])
  commandUsageId String       @unique
}

model IndividualCommandStat {
  cuid           String       @id @default(cuid())
  name           String
  type           CommandType
  usageCount     Int          @default(0)
  commandUsage   CommandUsage @relation(fields: [commandUsageId], references: [cuid])
  commandUsageId String       @unique
}

/**
 * Profile System
 */

model UserProfile {
  cuid       String      @id @default(cuid())
  userId     String      @unique
  bio        String      @default("")
  pronouns   String      @default("")
  website    String?
  github     String?
  twitter    String?
  // Relation
  user       User        @relation(fields: [userId], references: [user_id])
  reputation Reputation?
  badges     UserBadge[]
}

model UserBadge {
  cuid     String      @id @default(cuid())
  userId   String      @unique
  badgeId  String
  earnedAt DateTime    @default(now())
  user     UserProfile @relation(fields: [userId], references: [userId])
  badge    Badge       @relation(fields: [badgeId], references: [cuid])
}

model Badge {
  cuid       String      @id @default(cuid())
  name       String
  icon       String
  userBadges UserBadge[]
}

model Reputation {
  cuid      String      @id @default(cuid())
  userId    String      @unique
  points    Int         @default(0)
  updatedAt DateTime    @updatedAt
  user      UserProfile @relation(fields: [userId], references: [userId])
}

/**
 * Settings ~ Utility
 */

model UserBan {
  cuid      String    @id @default(cuid())
  userId    String    @unique
  reason    String
  bannedAt  DateTime  @default(now())
  expiresAt DateTime?
  // Relations
  user      User      @relation(fields: [userId], references: [user_id])

  // Cleanup
  @@index([expiresAt])
}

model UserLocalization {
  cuid     String @id @default(cuid())
  userId   String @unique
  language String @default("en")
  timezone String @default("UTC")
  // Relation
  user     User   @relation(fields: [userId], references: [user_id])
}

model Cooldown {
  cuid      String   @id @default(cuid())
  userId    String
  command   String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [user_id])

  @@index([userId, command])
}

model UserSettings {
  cuid    String  @id @default(cuid())
  userId  String  @unique
  prefix  String  @default("a.")
  color   String  @default("ff47ff")
  premium Boolean @default(false)
  // Relation
  user    User    @relation(fields: [userId], references: [user_id])
}

model PremiumSubscription {
  cuid      String      @id @default(cuid())
  userId    String      @unique
  startedAt DateTime    @default(now())
  expiresAt DateTime
  tier      PremiumTier
  user      User        @relation(fields: [userId], references: [user_id])
}

/**
 * Testing
 */

model test {
  user_id   String   @id @unique
  createdAt DateTime @default(now())
}
